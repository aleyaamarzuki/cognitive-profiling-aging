## model code adapted from Gl√§scher, Adolphs, & Tranel (2019), Nature Communications. Please cite this paper if you are using this code ## 

model
    {

#### PRIORS ####
priorA <- 1
  priorB <- 1

  # Priors
  r ~ dbeta(priorA,priorB) T(0.001,0.999)
  p ~ dbeta(priorA,priorB) T(0.001,0.999)
  d.prime ~ dbeta(priorA,priorB) T(0.001,0.999)
  d <- 5.0 * d.prime
  f <- 1
    ##### INITIALISE VARIABLES ######

    att_signal[1,1] <- 1/3    
    att_signal[1,2] <- 1/3 
    att_signal[1,3] <- 1/3 
    
  ## LOOP THROUGH TRIALS ##  
    for (t in 1:N_TRIALS) {
    
    # compute action probability from a
    prob[t] <- (deck_match_rule[t,] %*% att_signal[t,]^d) / (sum(att_signal[t,]^d)+1.0E-10) 
      
    # constrain probability between (and excluding) 0 and 1
    tmp[t] <- (prob[t]<=0) * 1.0E-10 + (prob[t]>=1) * (1 - 1.0E-10) + (prob[t]>0 && prob[t]<1) * prob[t]
      
    # relate data to model
    one[t] ~ dbern(tmp[t])

   #### PREDICTIVE POSTERIOR CHECK ####
    postpredmatch[t] ~ dbern(tmp[t])
    
    
    #### FOR FEEDBACK SIGNAL ####
    
    # feedback signal depending on outcome (reward/punishment)
    denomw[t] <- sum(deck_match_rule[t,]* att_signal[t,]^f) + 1.0E-10
    denoml[t] <- sum((1-deck_match_rule[t,]) * att_signal[t,]^f) + 1.0E-10
    fdbk_signal[t,1] <- ((outcome[t]==1) * (deck_match_rule[t,1] * att_signal[t,1]^f) / denomw[t]) + ((outcome[t]==0) * ((1-deck_match_rule[t,1]) * att_signal[t,1]^f) / denoml[t])
    fdbk_signal[t,2] <- ((outcome[t]==1) * (deck_match_rule[t,2] * att_signal[t,2]^f) / denomw[t]) + ((outcome[t]==0) * ((1-deck_match_rule[t,2]) * att_signal[t,2]^f) / denoml[t])
    fdbk_signal[t,3] <- ((outcome[t]==1) * (deck_match_rule[t,3] * att_signal[t,3]^f) / denomw[t]) + ((outcome[t]==0) * ((1-deck_match_rule[t,3]) * att_signal[t,3]^f) / denoml[t])
   
  
    #### FOR ATTENTION SIGNAL ####
    
        # update attention weights
    att_signal[t+1,1] <- (outcome[t]==1) * ((1-r) * att_signal[t,1] + r * fdbk_signal[t,1]) + (outcome[t]==0) * ((1-p) * att_signal[t,1] + p * fdbk_signal[t,1])
    att_signal[t+1,2] <- (outcome[t]==1) * ((1-r) * att_signal[t,2] + r * fdbk_signal[t,2]) + (outcome[t]==0) * ((1-p) * att_signal[t,2] + p * fdbk_signal[t,2])
    att_signal[t+1,3] <- (outcome[t]==1) * ((1-r) * att_signal[t,3] + r * fdbk_signal[t,3]) + (outcome[t]==0) * ((1-p) * att_signal[t,3] + p * fdbk_signal[t,3])
    
    
    } #end of trial loop
    
    
    }